#!/usr/bin/python

import battlesim
from battlesimwrap import *

import numpy
from random import normalvariate, seed

import gizeh as gz
import moviepy.editor as mpy

from argparse import ArgumentParser
import ConfigParser


class PixelFill(object):
    """
    Metadata for filling the image with pixels.
    """
    def __init__(self):
        self.scale = 1
        self.size = 1
        self.mapping = {0 : {}, 1 : {}}

        self.win = {0 : (0, 1, 0), 1 : (0, 0, 1)}

        self.mapping[0][Soldier.LEADER] = (0, 1, 0)
        self.mapping[1][Soldier.LEADER] = (0, 0, 1)

        self.mapping[0][Soldier.SWORDSMAN] = (0, 1, 0)
        self.mapping[1][Soldier.SWORDSMAN] = (0, 0, 1)

        self.mapping[0][Soldier.ARCHER] = (0, 1, 0)
        self.mapping[1][Soldier.ARCHER] = (0, 0, 1)

        self.dead = (1, 0, 0)


class IconFill(PixelFill):
    """
    Metadata for filling the image with icons.
    """
    def __init__(self):
        super(IconFill, self).__init__()
        self.scale = 10
        self.size = 20
        self.mapping = {0: {}, 1: {}}

        for t in ('LEADER', 'SWORDSMAN', 'ARCHER'):
            for a in (0, 1):
                self.mapping[a][getattr(Soldier, t)] = self.getImage('%s_%d.png'%(t.lower(), a)).scale(10)

        self.dead = self.getImage('dead.png').scale(10)

    def getImage(self, name):
        import itertools, png
        image = png.Reader(filename = name)
        pngdata = image.asDirect()[2]
        image_2d = numpy.vstack(itertools.imap(numpy.uint8, pngdata))
        image_3d = numpy.reshape(image_2d, (image.height, image.width, image.planes))
        return gz.ImagePattern(image_3d)




class FrameBuilder(object):
    """
    Class that builds the actual frames in the video.
    """
    def __createFieldFrame(self, accessibility):
        """
        Creates an empty frame of the field with obstructions.
        """
        obstructions = []
        it = numpy.nditer(accessibility, op_flags = ['readonly'], flags = ['multi_index'])
        while not it.finished:
            if it[0] != 255:
                color = list(it[0] / 255.0 for x in xrange(3))
                obstructions.append(gz.square(self.__fill.size, xy = (it.multi_index[1], it.multi_index[0]), fill = color))
            it.iternext()
        obstructions = gz.Group(obstructions)
        field = gz.Surface(self.__dims[1] * self.__fill.scale, self.__dims[0] * self.__fill.scale, bg_color = (1, 1, 1))
        obstructions.draw(field)
        return field.get_npimage()

    def __init__(self, fill, image = None, accessibility = None):
        if image is not None:
            import itertools, png
            r = png.Reader(filename = image)
            W, H, pngdata, meta = r.asDirect()
            assert meta['greyscale']
            accessibility = numpy.vstack(itertools.imap(numpy.uint8, pngdata))
        if accessibility is None:
            raise RuntimeError
        self.__dims = accessibility.shape
        # fill specifications
        self.__fill = fill

        # setup battle
        self.__bf = BattleField(accessibility)
        # iteration counter
        self.__iter = 0

        # create frame for empty field
        self.__field = self.__createFieldFrame(accessibility)

    def move(self):
        # create new frame from the field snapshot
        self.__frame = gz.Surface.from_image(self.__field)
        # move soldiers and draw them in their new positions
        soldiers = []
        W = self.__dims[1]
        for pos, army, kind in self.__bf.move():
            xy = [i * self.__fill.scale for i in (pos % W, pos / W)]
            fill = self.__fill.mapping[army][kind]
            soldiers.append(gz.square(self.__fill.size, xy = xy, fill = fill))
        gz.Group(soldiers).draw(self.__frame)

    def kill(self):
        # kill soldiers and indicate killed soldiers on the previous frame
        killed = []
        W = self.__dims[1]
        for pos in self.__bf.kill():
            xy = [i * self.__fill.scale for i in (pos % W, pos / W)]
            fill = self.__fill.dead
            killed.append(gz.square(self.__fill.size, xy = xy, fill = fill))
        gz.Group(killed).draw(self.__frame)

    def __call__(self, t):
        if self.__bf.status() != BattleField.ONGOING:
            # declare that the war is finished
            H, W = self.__dims
            gz.text('FIN!', 'Amiri', H, xy = ((W / 2) * self.__fill.scale, (H / 2) * self.__fill.scale)).draw(self.__frame)
        elif self.__iter % 2 == 0:
            # start off by moving
            self.move()
        else:
            # then killing
            self.kill()
        self.__iter += 1
        # return the image of the current frame
        return self.__frame.get_npimage()

if __name__ == '__main__':
    parser = ArgumentParser()
    parser.add_argument('--seed', help = 'Random seed value for running the simulation.',
                        type = int, default = 0)
    parser.add_argument('--iter', help = 'Number of iterations. One iteration includes move and kill.',
                        metavar = 'COUNT', type = int, default = 100)
    parser.add_argument('--fps', help = 'Frames per second.',
                        metavar = 'FPS', type = int, default = 2) 
    parser.add_argument('--render', help = 'Choice of rendering used by the simulator {pixel, icon}.',
                        metavar = 'CHOICE', choices = ['pixel', 'icon'], default = 'pixel')
    parser.add_argument('--ext', help = 'File type to be generated {mp4, gif}.',
                        metavar = 'EXT', choices = ['mp4', 'gif'], default = 'mp4')
    args = parser.parse_args()

    config = ConfigParser.ConfigParser()
    # soldier configuration
    config.read('soldier.config')
    Soldier.configure(config)

    # battlefield configuration
    config.read('battlefield.config')
    BattleField.configure(config)

    #armies confifuration
    config.read('armies.config')

    seed(args.seed)

    fill = IconFill() if args.render == 'icon' else PixelFill()

    time = ((args.iter * 2) / args.fps) + (1 if (args.iter * 2) % args.fps else 0)
    clip = mpy.VideoClip(FrameBuilder('field.png', fill), duration = time)

    name = 'battle.%s'%(args.ext)
    if args.ext == 'gif':
        clip.write_gif(name, fps = args.fps, opt = 'OptimizePlus', fuzz = 10)
    else:
        clip.write_videofile(name, fps = args.fps)
